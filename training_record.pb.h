// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: training_record.proto

#ifndef PROTOBUF_training_5frecord_2eproto__INCLUDED
#define PROTOBUF_training_5frecord_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_training_5frecord_2eproto();
void protobuf_AssignDesc_training_5frecord_2eproto();
void protobuf_ShutdownFile_training_5frecord_2eproto();

class TrainingRecord;
class Problem;
class Record;

// ===================================================================

class TrainingRecord : public ::google::protobuf::Message {
 public:
  TrainingRecord();
  virtual ~TrainingRecord();

  TrainingRecord(const TrainingRecord& from);

  inline TrainingRecord& operator=(const TrainingRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrainingRecord& default_instance();

  void Swap(TrainingRecord* other);

  // implements Message ----------------------------------------------

  TrainingRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrainingRecord& from);
  void MergeFrom(const TrainingRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Problem problem = 1;
  inline int problem_size() const;
  inline void clear_problem();
  static const int kProblemFieldNumber = 1;
  inline const ::Problem& problem(int index) const;
  inline ::Problem* mutable_problem(int index);
  inline ::Problem* add_problem();
  inline const ::google::protobuf::RepeatedPtrField< ::Problem >&
      problem() const;
  inline ::google::protobuf::RepeatedPtrField< ::Problem >*
      mutable_problem();

  // @@protoc_insertion_point(class_scope:TrainingRecord)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Problem > problem_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_training_5frecord_2eproto();
  friend void protobuf_AssignDesc_training_5frecord_2eproto();
  friend void protobuf_ShutdownFile_training_5frecord_2eproto();

  void InitAsDefaultInstance();
  static TrainingRecord* default_instance_;
};
// -------------------------------------------------------------------

class Problem : public ::google::protobuf::Message {
 public:
  Problem();
  virtual ~Problem();

  Problem(const Problem& from);

  inline Problem& operator=(const Problem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Problem& default_instance();

  void Swap(Problem* other);

  // implements Message ----------------------------------------------

  Problem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Problem& from);
  void MergeFrom(const Problem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 priority = 2;
  inline bool has_priority() const;
  inline void clear_priority();
  static const int kPriorityFieldNumber = 2;
  inline ::google::protobuf::int32 priority() const;
  inline void set_priority(::google::protobuf::int32 value);

  // repeated .Record record = 3;
  inline int record_size() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 3;
  inline const ::Record& record(int index) const;
  inline ::Record* mutable_record(int index);
  inline ::Record* add_record();
  inline const ::google::protobuf::RepeatedPtrField< ::Record >&
      record() const;
  inline ::google::protobuf::RepeatedPtrField< ::Record >*
      mutable_record();

  // @@protoc_insertion_point(class_scope:Problem)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_priority();
  inline void clear_has_priority();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::Record > record_;
  ::google::protobuf::int32 priority_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_training_5frecord_2eproto();
  friend void protobuf_AssignDesc_training_5frecord_2eproto();
  friend void protobuf_ShutdownFile_training_5frecord_2eproto();

  void InitAsDefaultInstance();
  static Problem* default_instance_;
};
// -------------------------------------------------------------------

class Record : public ::google::protobuf::Message {
 public:
  Record();
  virtual ~Record();

  Record(const Record& from);

  inline Record& operator=(const Record& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Record& default_instance();

  void Swap(Record* other);

  // implements Message ----------------------------------------------

  Record* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Record& from);
  void MergeFrom(const Record& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string date = 1;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 1;
  inline const ::std::string& date() const;
  inline void set_date(const ::std::string& value);
  inline void set_date(const char* value);
  inline void set_date(const char* value, size_t size);
  inline ::std::string* mutable_date();
  inline ::std::string* release_date();
  inline void set_allocated_date(::std::string* date);

  // required double duration = 2;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 2;
  inline double duration() const;
  inline void set_duration(double value);

  // @@protoc_insertion_point(class_scope:Record)
 private:
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_duration();
  inline void clear_has_duration();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* date_;
  double duration_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_training_5frecord_2eproto();
  friend void protobuf_AssignDesc_training_5frecord_2eproto();
  friend void protobuf_ShutdownFile_training_5frecord_2eproto();

  void InitAsDefaultInstance();
  static Record* default_instance_;
};
// ===================================================================


// ===================================================================

// TrainingRecord

// repeated .Problem problem = 1;
inline int TrainingRecord::problem_size() const {
  return problem_.size();
}
inline void TrainingRecord::clear_problem() {
  problem_.Clear();
}
inline const ::Problem& TrainingRecord::problem(int index) const {
  return problem_.Get(index);
}
inline ::Problem* TrainingRecord::mutable_problem(int index) {
  return problem_.Mutable(index);
}
inline ::Problem* TrainingRecord::add_problem() {
  return problem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Problem >&
TrainingRecord::problem() const {
  return problem_;
}
inline ::google::protobuf::RepeatedPtrField< ::Problem >*
TrainingRecord::mutable_problem() {
  return &problem_;
}

// -------------------------------------------------------------------

// Problem

// required string name = 1;
inline bool Problem::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Problem::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Problem::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Problem::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Problem::name() const {
  return *name_;
}
inline void Problem::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Problem::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Problem::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Problem::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Problem::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Problem::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 priority = 2;
inline bool Problem::has_priority() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Problem::set_has_priority() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Problem::clear_has_priority() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Problem::clear_priority() {
  priority_ = 0;
  clear_has_priority();
}
inline ::google::protobuf::int32 Problem::priority() const {
  return priority_;
}
inline void Problem::set_priority(::google::protobuf::int32 value) {
  set_has_priority();
  priority_ = value;
}

// repeated .Record record = 3;
inline int Problem::record_size() const {
  return record_.size();
}
inline void Problem::clear_record() {
  record_.Clear();
}
inline const ::Record& Problem::record(int index) const {
  return record_.Get(index);
}
inline ::Record* Problem::mutable_record(int index) {
  return record_.Mutable(index);
}
inline ::Record* Problem::add_record() {
  return record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Record >&
Problem::record() const {
  return record_;
}
inline ::google::protobuf::RepeatedPtrField< ::Record >*
Problem::mutable_record() {
  return &record_;
}

// -------------------------------------------------------------------

// Record

// required string date = 1;
inline bool Record::has_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Record::set_has_date() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Record::clear_has_date() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Record::clear_date() {
  if (date_ != &::google::protobuf::internal::kEmptyString) {
    date_->clear();
  }
  clear_has_date();
}
inline const ::std::string& Record::date() const {
  return *date_;
}
inline void Record::set_date(const ::std::string& value) {
  set_has_date();
  if (date_ == &::google::protobuf::internal::kEmptyString) {
    date_ = new ::std::string;
  }
  date_->assign(value);
}
inline void Record::set_date(const char* value) {
  set_has_date();
  if (date_ == &::google::protobuf::internal::kEmptyString) {
    date_ = new ::std::string;
  }
  date_->assign(value);
}
inline void Record::set_date(const char* value, size_t size) {
  set_has_date();
  if (date_ == &::google::protobuf::internal::kEmptyString) {
    date_ = new ::std::string;
  }
  date_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Record::mutable_date() {
  set_has_date();
  if (date_ == &::google::protobuf::internal::kEmptyString) {
    date_ = new ::std::string;
  }
  return date_;
}
inline ::std::string* Record::release_date() {
  clear_has_date();
  if (date_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = date_;
    date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Record::set_allocated_date(::std::string* date) {
  if (date_ != &::google::protobuf::internal::kEmptyString) {
    delete date_;
  }
  if (date) {
    set_has_date();
    date_ = date;
  } else {
    clear_has_date();
    date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required double duration = 2;
inline bool Record::has_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Record::set_has_duration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Record::clear_has_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Record::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline double Record::duration() const {
  return duration_;
}
inline void Record::set_duration(double value) {
  set_has_duration();
  duration_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_training_5frecord_2eproto__INCLUDED
